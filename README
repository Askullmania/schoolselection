The School Discovery App is designed to help parents 1) identify the schools to which their children are eligible to apply and 2) understand the odds of their children getting admitted. To search for schools, parents enter an address and a grade level.  The search engine logic works as follows:

1. if no parameters are entered -> display a blank map and a welcome note (the default page)
2. if a grade level and no address are entered -> display the default page with an alert message
3. if a grade level and non-geocodeable address are entered -> display the default page with an alert message
4. if a grade level and non-Boston address are entered -> display the default page with an alert message
5. if a grade level and valid address are entered -> display the walk zone and assignment zone schools for that address
6. if high school and a valid address are entered -> display the walk zone schools and all of the other high schools throughout the city


http://schoolselection.herokuapp.com/ | git@heroku.com:schoolselection.git

SCRIBBLES und SCRABBLES

require 'rgeo'
require 'rgeo/shapefile'

parcels = RGeo::Shapefile::Reader.open('../../Projects/SchoolSelection/Data/school_parcels_2012/PublicSchools_SY1112')
# dbf_schools = DBF::Table.new('../../Projects/SchoolSelection/Data/school_parcels/schools.dbf')
# old_parcels = GeoRuby::Shp4r::ShpFile.open('../../Projects/SchoolSelection/Data/school_parcels/school_parcels')

parcels.each do |parcel|
	#parcel.geometry.srid = 2249
	dbf_school = dbf_schools.find(:first, :bldg_id => parcel.attributes['BUILD_ID'])
  if dbf_school.present?
  	rails_school = School.find_by_bpsid(parcel.attributes['SCH_ID'])
  	rails_school ||= School.find_by_name(parcel.attributes['SCH_NAME'])
    if rails_school.present?
      rails_school.parcel=nil
      rails_school.save
      rails_school.parcel = parcel.geometry
      rails_school.save
    end
  end
end

zones = RGeo::Shapefile::Reader.open('../../Projects/SchoolSelection/Data/assignment_zones/zones_4326')


school = School.find_by_name("O'Bryant School of Math & Science")
dbf_school = schools.to_a.find {|x| x.sch_id == 2090}

parcels.each do |parcel|
if parcel.data['BUILD_ID'] == dbf_school.bldg_id
if parcel.data.bldg_name == "Madison Park Bldg #1"
parcel.geometry.srid = 4326
school.update_attribute(:parcel, parcel.geometry)
end
end

IMPORT SCHOOLS FROM 2011-2012 CSV
CSV.foreach("../../Projects/SchoolSelection/Data/Schools/SchoolData_2011-12-Table.csv") do |row|
  if row[0].present?
    city = City.find_or_create_by_name(row[5])
    neighborhood = Neighborhood.find_or_create_by_name(row[7])
    assignment_zone = AssignmentZone.find_or_create_by_name(row[8])
    grades = row[10].split(/\b*-\b*/)
    start_grade = GradeLevel.find_by_number(grades[0])
    end_grade = GradeLevel.find_by_number(grades[1])
    if start_grade.present? && end_grade.present?
      id_range = (start_grade.id..end_grade.id).to_a
      grade_levels = GradeLevel.find(id_range)
      school = School.create(:bpsid => row[1], :name => row[2], :short_name => row[3], :address => row[4], :city_id => city.id, :zipcode => row[6], :neighborhood_id => neighborhood.id, :assignment_zone_id => assignment_zone.id)
      school.grade_levels << grade_levels
    else
      school = School.create(:bpsid => row[1], :name => row[2], :short_name => row[3], :address => row[4], :city_id => city.id, :zipcode => row[6], :neighborhood_id => neighborhood.id, :assignment_zone_id => assignment_zone.id)		
    end
  end
end

